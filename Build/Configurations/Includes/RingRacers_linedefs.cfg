udmf
{
	misc
	{
		title = "Miscellaneous";

		0
		{
			title = "None";
			prefix = "(0)";
		}

		7
		{
			title = "Sector Flat Alignment";
			prefix = "(7)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Affected planes";
				type = 11;
				enum = "floorceiling";
				default = 2;
			}
		}

		10
		{
			title = "Culling Plane";
			prefix = "(10)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Culling behavior";
				type = 11;
				enum
				{
					0 = "Always";
					1 = "Only while in sector";
				}
			}
		}

		40
		{
			title = "Visual Portal Between Tagged Linedefs";
			prefix = "(40)";
		}

		41
		{
			title = "Horizon Effect";
			prefix = "(41)";
		}

		63
		{
			title = "Fake Floor/Ceiling Planes";
			prefix = "(63)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
		}

		80
		{
			title = "Offset Tagged Things from Frontside FOF";
			prefix = "(80)";
			arg0
			{
				title = "Target thing type";
				type = 0;
			}
		}

		2001
		{
			title = "Finish Line";
			prefix = "(2001)";
			arg0
			{
				title = "Flip?";
				type = 3;
			}
		}

		2003
		{
			title = "Respawn Line";
			prefix = "(2003)";
			arg0
			{
				title = "Only from front?";
				type = 3;
			}
		}

		2004
		{
			title = "Bot Controller";
			prefix = "(2004)";
			arg0
			{
				title = "Trick";
				type = 12;
				enum
				{
					0 = "None";
					1 = "Left";
					2 = "Right";
					3 = "Up";
					4 = "Down";
				}
			}
			arg1
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Disable rubberbanding";
					2 = "Disable controls";
					4 = "Use forced angle?";
				}
			}
			arg2
			{
				title = "Forced Angle";
				type = 8;
			}
		}
	}

	parameters
	{
		title = "Parameters";

		2
		{
			title = "Custom Exit";
			prefix = "(2)";
			arg0
			{
				title = "Next map";
			}
		}

		3
		{
			title = "Zoom Tube Parameters";
			prefix = "(3)";
			arg0
			{
				title = "Speed";
			}
			arg1
			{
				title = "Sequence";
			}
			arg2
			{
				title = "Check player direction?";
				type = 11;
				enum = "yesno";
			}
		}

		8
		{
			title = "Set Camera Collision Planes";
			prefix = "(8)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
		}

		11
		{
			title = "Rope Hang Parameters";
			prefix = "(11)";
			arg0
			{
				title = "Speed";
			}
			arg1
			{
				title = "Sequence";
			}
			arg2
			{
				title = "Loop?";
				type = 11;
				enum = "yesno";
			}
		}

		14
		{
			title = "Bustable Block Parameters";
			prefix = "(14)";
			arg0
			{
				title = "Debris spacing";
			}
			arg1
			{
				title = "Debris lifetime";
			}
			arg2
			{
				title = "Launch from center?";
				type = 11;
				enum = "noyes";
			}
			stringarg0
			{
				title = "Debris object type";
				type = 2;
			}
		}

		15
		{
			title = "Fan Particle Generator Heights";
			prefix = "(15)";
		}

		16
		{
			title = "Minecart Parameters";
			prefix = "(16)";
			arg0
			{
				title = "Order";
			}
		}

		64
		{
			title = "Continuously Appearing/Disappearing FOF";
			prefix = "(64)";
			arg0
			{
				title = "Control linedef tag";
				type = 15;
			}
			arg1
			{
				title = "Control sector tag";
				type = 13;
			}
			arg2
			{
				title = "On time";
			}
			arg3
			{
				title = "Off time";
			}
			arg4
			{
				title = "Initial delay";
			}
			arg5
			{
				title = "Play sound?";
				type = 11;
				enum = "yesno";
			}
		}
	}

	polyobject
	{
		title = "PolyObject";

		20
		{
			title = "First Line";
			prefix = "(20)";
			arg0
			{
				title = "PolyObject ID";
				type = 14;
			}
			arg1
			{
				title = "Parent ID";
				type = 14;
			}
			arg2
			{
				title = "Translucency";
			}
			arg3
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Don't render insides";
					2 = "Intangible";
					4 = "Stopped by pushables";
					8 = "Don't render planes";
					16 = "Trigger linedef executor on touch";
					32 = "Crush player";
					64 = "Cut cyan flat pixels";
				}
			}
			arg4
			{
				title = "Trigger linedef tag";
				type = 15;
			}
		}

		30
		{
			title = "Waving Flag";
			prefix = "(30)";
			arg0
			{
				title = "PolyObject ID";
				type = 14;
			}
			arg1
			{
				title = "Speed";
			}
			arg2
			{
				title = "Distance";
			}
		}

		31
		{
			title = "Displacement by Front Sector";
			prefix = "(31)";
			arg0
			{
				title = "PolyObject ID";
				type = 14;
			}
			arg1
			{
				title = "Base speed";
			}
		}

		32
		{
			title = "Angular Displacement by Front Sector";
			prefix = "(32)";
			arg0
			{
				title = "PolyObject ID";
				type = 14;
			}
			arg1
			{
				title = "Plane factor";
				default = 128;
			}
			arg2
			{
				title = "Rotation factor";
				default = 90;
			}
			arg3
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Don't turn others";
					2 = "Turn players";
				}
			}
		}
	}

	planemove
	{
		title = "Plane Movement";

		52
		{
			title = "Continuously Falling Sector";
			prefix = "(52)";
			arg0
			{
				title = "Speed";
			}
			arg1
			{
				title = "Direction";
				type = 11;
				enum
				{
					0 = "Fall";
					1 = "Rise";
				}
			}
		}

		53
		{
			title = "Continuous Plane Mover (Slowdown)";
			prefix = "(53)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Affected planes";
				type = 11;
				enum = "floorceiling";
			}
			arg2
			{
				title = "Forward speed";
			}
			arg3
			{
				title = "Return speed";
			}
			arg4
			{
				title = "Starting delay";
			}
			arg5
			{
				title = "Delay before flip";
			}
		}

		56
		{
			title = "Continuous Plane Mover (Constant)";
			prefix = "(56)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Affected planes";
				type = 11;
				enum = "floorceiling";
			}
			arg2
			{
				title = "Forward speed";
			}
			arg3
			{
				title = "Return speed";
			}
			arg4
			{
				title = "Starting delay";
			}
			arg5
			{
				title = "Delay before flip";
			}
		}

		60
		{
			title = "Activate Moving Platform";
			prefix = "(60)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Speed";
			}
			arg2
			{
				title = "Starting delay";
			}
			arg3
			{
				title = "Delay before flip";
			}
			arg4
			{
				title = "Starting direction";
				type = 11;
				enum = "downup";
			}
		}

		61
		{
			title = "Ceiling Crusher";
			prefix = "(61)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Starting direction";
				type = 11;
				enum
				{
					0 = "Crush";
					1 = "Retract";
				}
			}
			arg2
			{
				title = "Crush speed";
			}
			arg3
			{
				title = "Retract speed";
			}
		}

		66
		{
			title = "Move Planes by Displacement";
			prefix = "(66)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Affected planes";
				type = 11;
				enum = "floorceiling";
			}
			arg2
			{
				title = "Translation factor";
				default = 256;
			}
		}
	}

	fofmodifiers
	{
		title = "FOF Modifiers";

		70
		{
			title = "Add Raise Thinker";
			prefix = "(70)";
			arg0
			{
				title = "Control linedef tag";
				type = 15;
			}
			arg1
			{
				title = "Speed";
			}
			arg2
			{
				title = "Destination height";
			}
			arg3
			{
				title = "Require spindash?";
				type = 11;
				enum = "noyes";
			}
		}

		71
		{
			title = "Add Air Bobbing Thinker";
			prefix = "(71)";
			arg0
			{
				title = "Control linedef tag";
				type = 15;
			}
			arg1
			{
				title = "Bobbing distance";
			}
			arg2
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Raise";
					2 = "Require spindash";
					4 = "Dynamic";
				}
			}
		}

		72
		{
			title = "Add Thwomp Thinker";
			prefix = "(72)";
			arg0
			{
				title = "Control linedef tag";
				type = 15;
			}
			arg1
			{
				title = "Falling speed";
			}
			arg2
			{
				title = "Rising speed";
			}
			stringarg0
			{
				title = "Crushing sound";
				type = 2;
			}
		}

		73
		{
			title = "Add Laser Thinker";
			prefix = "(73)";
			arg0
			{
				title = "Control linedef tag";
				type = 15;
			}
			arg1
			{
				title = "Damage bosses?";
				type = 11;
				enum = "yesno";
			}
		}

		74
		{
			title = "Make FOF Bustable";
			prefix = "(74)";
			arg0
			{
				title = "Control linedef tag";
				type = 15;
			}
			arg1
			{
				title = "Bustable type";
				type = 11;
				enum
				{
					0 = "Touch";
					1 = "Spin";
					2 = "Regular";
					3 = "Strong";
				}
			}
			arg2
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Bustable by pushables";
					2 = "Trigger linedef executor";
					4 = "Only bustable from below";
				}
			}
			arg3
			{
				title = "Linedef executor tag";
				type = 15;
			}
		}

		75
		{
			title = "Make FOF Quicksand";
			prefix = "(75)";
			arg0
			{
				title = "Control linedef tag";
				type = 15;
			}
			arg1
			{
				title = "Sinking speed";
			}
			arg2
			{
				title = "Friction";
			}
		}

		76
		{
			title = "Make FOF Bouncy";
			prefix = "(76)";
			arg0
			{
				title = "Control linedef tag";
				type = 15;
			}
			arg1
			{
				title = "Bounce strength";
			}
		}
	}

	fof
	{
		title = "FOF";

		100
		{
			title = "Solid";
			prefix = "(100)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Alpha";
				default = 255;
			}
			arg2
			{
				title = "Blending mode";
				type = 11;
				enum = "blendmodes";
			}
			arg3
			{
				title = "Appearance";
				type = 12;
				enum
				{
					1 = "Don't render planes";
					2 = "Don't render sides";
					4 = "Render insides";
					8 = "Render only insides";
					16 = "No shadow";
					32 = "Cut cyan flat pixels";
				}
			}
			arg4
			{
				title = "Tangibility";
				type = 12;
				enum = "tangibility";
			}
		}

		120
		{
			title = "Water";
			prefix = "(120)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Alpha";
				default = 128;
			}
			arg2
			{
				title = "Blending mode";
				type = 11;
				enum = "blendmodes";
			}
			arg3
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Don't render sides";
					2 = "Render separate light level";
					4 = "Use target light level";
					8 = "No ripple effect";
					16 = "Goo physics";
					32 = "Cut cyan flat pixels";
				}
			}
		}

		150
		{
			title = "Air Bobbing";
			prefix = "(150)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Bobbing distance";
			}
			arg2
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Raise";
					2 = "Require spindash";
					4 = "Dynamic";
				}
			}
		}

		160
		{
			title = "Water Bobbing";
			prefix = "(160)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
		}

		170
		{
			title = "Crumbling";
			prefix = "(170)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Alpha";
				default = 255;
			}
			arg2
			{
				title = "Blending mode";
				type = 11;
				enum = "blendmodes";
			}
			arg3
			{
				title = "Tangibility";
				type = 12;
				enum = "tangibility";
			}
			arg4
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "No shadow";
					2 = "No respawn";
					4 = "Air bobbing";
					8 = "Float on water";
					16 = "Cut cyan flat pixels";
				}
			}
		}

		190
		{
			title = "Rising";
			prefix = "(190)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Alpha";
				default = 255;
			}
			arg2
			{
				title = "Blending mode";
				type = 11;
				enum = "blendmodes";
			}
			arg3
			{
				title = "Appearance";
				type = 12;
				enum
				{
					1 = "Don't render planes";
					2 = "Don't render sides";
					4 = "Render insides";
					8 = "Render only insides";
					16 = "No shadow";
					32 = "Cut cyan flat pixels";
				}
			}
			arg4
			{
				title = "Tangibility";
				type = 12;
				enum = "tangibility";
			}
			arg5
			{
				title = "Speed";
			}
			arg6
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Lower";
					2 = "Require spindash";
				}
			}
		}

		200
		{
			title = "Light Block";
			prefix = "(200)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Expand to bottom?";
				type = 11;
				enum = "noyes";
			}
		}

		202
		{
			title = "Fog Block";
			prefix = "(202)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
		}

		220
		{
			title = "Intangible";
			prefix = "(220)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Alpha";
				default = 255;
			}
			arg2
			{
				title = "Blending mode";
				type = 11;
				enum = "blendmodes";
			}
			arg3
			{
				title = "Appearance";
				type = 12;
				enum
				{
					1 = "Don't render planes";
					2 = "Don't render sides";
					4 = "Don't render insides";
					8 = "Render only insides";
					16 = "No shadow";
					32 = "Cut cyan flat pixels";
				}
			}
		}

		223
		{
			title = "Intangible, Invisible";
			prefix = "(223)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
		}

		250
		{
			title = "Mario Block";
			prefix = "(250)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Block type";
				type = 12;
				enum
				{
					1 = "Brick";
					2 = "Invisible";
				}
			}
		}

		251
		{
			title = "Thwomp Block";
			prefix = "(251)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Falling speed";
			}
			arg2
			{
				title = "Rising speed";
			}
			arg3
			{
				title = "Initial delay";
			}
			stringarg0
			{
				title = "Crushing sound";
				type = 2;
			}
		}

		254
		{
			title = "Bustable Block";
			prefix = "(254)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Alpha";
				default = 255;
			}
			arg2
			{
				title = "Blending mode";
				type = 11;
				enum = "blendmodes";
			}
			arg3
			{
				title = "Bustable type";
				type = 11;
				enum
				{
					0 = "Touch";
					1 = "Spin";
					2 = "Regular";
					3 = "Strong";
				}
			}
			arg4
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Bustable by pushables";
					2 = "Trigger linedef executor";
					4 = "Only bustable from below";
					8 = "Cut cyan flat pixels";
				}
			}
			arg5
			{
				title = "Linedef executor tag";
				type = 15;
			}
		}

		257
		{
			title = "Quicksand";
			prefix = "(257)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Ripple effect?";
				type = 11;
				enum = "yesno";
			}
			arg2
			{
				title = "Sinking speed";
			}
			arg3
			{
				title = "Friction";
			}
		}

		258
		{
			title = "Laser";
			prefix = "(258)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Alpha";
				default = 128;
			}
			arg2
			{
				title = "Blending mode";
				type = 11;
				enum = "blendmodes";
			}
			arg3
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Don't damage bosses";
					2 = "Cut cyan flat pixels";
				}
			}
		}

		259
		{
			title = "Custom";
			prefix = "(259)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Alpha";
				default = 255;
			}
			arg2
			{
				title = "Blending mode";
				type = 11;
				enum = "blendmodes";
			}
			arg3
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Exists";
					2 = "Block player";
					4 = "Block others";
					8 = "Render sides";
					16 = "Render planes";
					32 = "Water";
					64 = "No shadow";
					128 = "Cut solid walls";
					256 = "Cut extra walls";
					512 = "Split sprites";
					1024 = "Render inside planes";
					2048 = "Extra";
					8192 = "Fog";
					16384 = "Only render inside planes";
					32768 = "Render inside walls";
					65536 = "Only render inside walls";
					131072 = "Double shadow";
					262144 = "Water bobbing";
					524288 = "Don't respawn";
					1048576 = "Crumbling";
					2097152 = "Goo water";
					4194304 = "Mario block";
					33554432 = "Intangible from below";
					67108864 = "Intangible from above";
					134217728 = "Ripple effect";
					268435456 = "Don't copy light level";
					536870912 = "Bouncy";
					1073741824 = "Cut cyan flat pixels";
				}
			}
		}
		260
		{
			title = "Generalized 3D Floor";
			prefix = "(260)";
			id = "Sector_Set3dFloor";
			requiresactivation = false;

			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Type";
				type = 26;
				default = 1;
				enum
				{
					1 = "Solid";
					2 = "Water";
					3 = "Intangible";
				}
				flags
				{
					4 = "Render insides";
					16 = "Only render insides";
				}
			}
			arg2
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "No shadow";
					2 = "Double shadow";
					4 = "Fog";
				}
			}
			arg3
			{
				title = "Alpha";
				default = 255;
			}
		}
	}

	linedeftrigger
	{
		title = "Linedef Executor Trigger";

		300
		{
			title = "Basic";
			prefix = "(300)";
			arg0
			{
				title = "Trigger type";
				type = 11;
				enum = "triggertype";
			}
		}

		303
		{
			title = "Ring Count";
			prefix = "(303)";
			arg0
			{
				title = "Trigger type";
				type = 11;
				enum = "triggertype";
			}
			arg1
			{
				title = "Rings";
			}
			arg2
			{
				title = "Comparison";
				type = 11;
				enum = "comparison";
			}
			arg3
			{
				title = "Count all players?";
				type = 11;
				enum = "noyes";
			}
		}

		308
		{
			title = "Gametype";
			prefix = "(308)";
			arg0
			{
				title = "Trigger type";
				type = 11;
				enum = "triggertype";
			}
			arg1
			{
				title = "Rules";
				type = 12;
				enum
				{
					1 = "Campaign";
					2 = "Ringslinger";
					4 = "Spectators";
					8 = "Lives";
					16 = "Teams";
					32 = "First person";
					64 = "Match emeralds";
					128 = "Team flags";
					256 = "Coop";
					512 = "Allow special stages";
					1024 = "Spawn emerald tokens";
					2048 = "Emerald hunt";
					4096 = "Race";
					8192 = "Tag";
					16384 = "Point limit";
					32768 = "Time limit";
					65536 = "Overtime";
					131072 = "Hurt messages";
					262144 = "Friendly fire";
					524288 = "Hide time countdown";
					1048576 = "Frozen after hide time";
					2097152 = "Blindfolded view";
					4194304 = "Respawn delay";
					8388608 = "Award pity shield";
					16777216 = "Death score penalty";
					33554432 = "No spectator spawn";
					67108864 = "Use match starts";
					134217728 = "Spawn invincibility";
					268435456 = "Allow enemies";
					536870912 = "Allow exit sectors";
					1073741824 = "No title card";
					2147483648 = "Allow cutscenes";
				}
			}
			arg2
			{
				title = "Check if";
				type = 11;
				enum = "flagcheck";
			}
		}

		309
		{
			title = "CTF Team";
			prefix = "(309)";
			arg0
			{
				title = "Trigger type";
				type = 11;
				enum = "triggertype";
			}
			arg1
			{
				title = "Team";
				type = 11;
				enum = "team";
			}
		}

		313
		{
			title = "No More Enemies";
			prefix = "(313)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
		}

		314
		{
			title = "Number of Pushables";
			prefix = "(314)";
			arg0
			{
				title = "Trigger type";
				type = 11;
				enum = "triggertype";
			}
			arg1
			{
				title = "Pushables";
			}
			arg2
			{
				title = "Comparison";
				type = 11;
				enum = "comparison";
			}
		}

		317
		{
			title = "Condition Set Trigger";
			prefix = "(317)";
			arg0
			{
				title = "Trigger type";
				type = 11;
				enum = "triggertype";
			}
			arg1
			{
				title = "Trigger ID";
			}
		}

		319
		{
			title = "Unlockable";
			prefix = "(319)";
			arg0
			{
				title = "Trigger type";
				type = 11;
				enum = "triggertype";
			}
			arg1
			{
				title = "Unlockable ID";
			}
		}

		321
		{
			title = "Trigger After X Calls";
			prefix = "(321)";
			arg0
			{
				title = "Trigger type";
				type = 11;
				enum = "xtriggertype";
			}
			arg1
			{
				title = "Calls";
			}
			arg2
			{
				title = "Can retrigger?";
				type = 11;
				enum = "noyes";
			}
			arg3
			{
				title = "Starting calls";
			}
		}

		334
		{
			title = "Object Dye";
			prefix = "(334)";
			arg0
			{
				title = "Trigger type";
				type = 11;
				enum = "triggertype";
			}
			arg1
			{
				title = "Invert choice?";
				type = 11;
				enum = "noyes";
			}
			stringarg0
			{
				title = "Color";
				type = 2;
			}
		}

		399
		{
			title = "Level Load";
			prefix = "(399)";
		}

		2002
		{
			title = "Race Lap";
			prefix = "(2002)";
			arg0
			{
				title = "Lap";
			}
			arg1
			{
				title = "Trigger";
				type = 11;
				enum
				{
					0 = "Equal";
					1 = "Greater than or equal";
					2 = "Less than or equal";
				}
			}
			arg2
			{
				title = "First place?";
				type = 3;
			}
		}
	}

	linedefexecsector
	{
		title = "Linedef Executor (sector)";

		400
		{
			title = "Set Tagged Sector's Heights/Textures";
			prefix = "(400)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Affected planes";
				type = 11;
				enum = "floorceiling";
			}
			arg2
			{
				title = "Set flats?";
				type = 11;
				enum = "noyes";
			}
		}

		402
		{
			title = "Copy Light Level to Tagged Sectors";
			prefix = "(402)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Don't copy main light level";
					2 = "Don't copy floor light level";
					4 = "Don't copy ceiling light level";
				}
			}
		}

		408
		{
			title = "Set Tagged Sector's Flats";
			prefix = "(408)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Affected planes";
				type = 11;
				enum = "floorceiling";
			}
		}

		409
		{
			title = "Change Tagged Sector's Tag";
			prefix = "(409)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Tag";
				type = 13;
			}
			arg2
			{
				title = "Behavior";
				type = 11;
				enum
				{
					0 = "Add tag";
					1 = "Remove tag";
					2 = "Replace first tag";
					3 = "Change trigger tag";
				}
			}
		}

		410
		{
			title = "Change Front Sector's Tag";
			prefix = "(410)";
			arg0
			{
				title = "Tag";
				type = 13;
			}
			arg1
			{
				title = "Behavior";
				type = 11;
				enum
				{
					0 = "Add tag";
					1 = "Remove tag";
					2 = "Replace first tag";
					3 = "Change trigger tag";
				}
			}
		}

		416
		{
			title = "Start Adjustable Flickering Light";
			prefix = "(416)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Speed";
			}
			arg2
			{
				title = "Brightness 1";
			}
			arg3
			{
				title = "Use target brightness?";
				type = 11;
				enum = "noyes";
			}
			arg4
			{
				title = "Brightness 2";
			}
		}

		417
		{
			title = "Start Adjustable Pulsating Light";
			prefix = "(417)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Speed";
			}
			arg2
			{
				title = "Brightness 1";
			}
			arg3
			{
				title = "Use target brightness?";
				type = 11;
				enum = "noyes";
			}
			arg4
			{
				title = "Brightness 2";
			}
		}

		418
		{
			title = "Start Adjustable Blinking Light";
			prefix = "(418)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Brightness 1 tics";
			}
			arg2
			{
				title = "Brightness 2 tics";
			}
			arg3
			{
				title = "Brightness 1";
			}
			arg4
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Use target brightness";
					2 = "Synchronized";
				}
			}
			arg5
			{
				title = "Brightness 2";
			}
		}

		420
		{
			title = "Fade Light Level";
			prefix = "(420)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Destination light level";
			}
			arg2
			{
				title = "Fading speed";
			}
			arg3
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Add to current light level";
					2 = "Interrupt ongoing fades";
					4 = "Speed is duration";
				}
			}
		}

		421
		{
			title = "Stop Lighting Effect";
			prefix = "(421)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
		}

		435
		{
			title = "Change Plane Scroller Direction";
			prefix = "(435)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Speed";
			}
		}

		467
		{
			title = "Set Tagged Sector's Light Level";
			prefix = "(467)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Light level";
			}
			arg2
			{
				title = "Affected area";
				type = 11;
				enum
				{
					0 = "Sector";
					1 = "Floor";
					2 = "Ceiling";
				}
			}
			arg3
			{
				title = "Set/Add?";
				type = 11;
				enum = "setadd";
			}
		}

		469
		{
			title = "Change Tagged Sector's Gravity";
			prefix = "(469)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Set/Multiply?";
				type = 11;
				enum
				{
					0 = "Set";
					1 = "Multiply";
				}
			}
			arg2
			{
				title = "Flip flag";
				type = 11;
				enum
				{
					0 = "Don't change";
					1 = "Set";
					2 = "Remove";
				}
			}
			stringarg0
			{
				title = "Gravity value";
				type = 2;
			}
		}
	}

	linedefexecplane
	{
		title = "Linedef Executor (plane movement)";

		403
		{
			title = "Move Tagged Sector's Planes";
			prefix = "(403)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Affected planes";
				type = 11;
				enum = "floorceiling";
			}
			arg2
			{
				title = "Speed";
			}
			arg3
			{
				title = "Linedef executor tag";
				type = 15;
			}
			arg4
			{
				title = "Set flats?";
				type = 11;
				enum = "noyes";
			}
		}

		405
		{
			title = "Move Planes by Distance";
			prefix = "(405)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Affected planes";
				type = 11;
				enum = "floorceiling";
			}
			arg2
			{
				title = "Distance";
			}
			arg3
			{
				title = "Speed";
			}
			arg4
			{
				title = "Instant?";
				type = 11;
				enum = "noyes";
			}
		}

		411
		{
			title = "Stop Plane Movement";
			prefix = "(411)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
		}

		428
		{
			title = "Start Platform Movement";
			prefix = "(428)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Speed";
			}
			arg2
			{
				title = "Starting delay";
			}
			arg3
			{
				title = "Delay before flip";
			}
			arg4
			{
				title = "Starting direction";
				type = 11;
				enum
				{
					0 = "Down";
					1 = "Up";
				}
			}
		}

		429
		{
			title = "Crush Planes Once";
			prefix = "(429)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Affected planes";
				type = 11;
				enum = "floorceiling";
			}
			arg2
			{
				title = "Crush speed";
			}
			arg3
			{
				title = "Retract speed";
			}
		}
	}

	linedefexecplayer
	{
		title = "Linedef Executor (player/object)";

		412
		{
			title = "Teleporter";
			prefix = "(412)";
			arg0
			{
				title = "Destination tag";
				type = 14;
			}
			arg1
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Silent";
					2 = "Keep angle";
					4 = "Keep momentum";
					8 = "Relative silent";
				}
			}
			arg2
			{
				title = "X offset";
			}
			arg3
			{
				title = "Y offset";
			}
			arg4
			{
				title = "Z offset";
			}
		}

		425
		{
			title = "Change Object State";
			prefix = "(425)";
			stringarg0
			{
				title = "State";
				type = 2;
			}
		}

		426
		{
			title = "Stop Object";
			prefix = "(426)";
			arg0
			{
				title = "Move to center?";
				type = 11;
				enum = "noyes";
			}
		}

		427
		{
			title = "Award Score";
			prefix = "(427)";
			arg0
			{
				title = "Score";
			}
		}

		432
		{
			title = "Enable/Disable 2D Mode";
			prefix = "(432)";
			arg0
			{
				title = "Mode";
				type = 11;
				enum
				{
					0 = "2D";
					1 = "3D";
				}
			}
		}

		433
		{
			title = "Enable/Disable Gravity Flip";
			prefix = "(433)";
			arg0
			{
				title = "Gravity";
				type = 11;
				enum
				{
					0 = "Reverse";
					1 = "Normal";
				}
			}
		}

		434
		{
			title = "Award Power-Up";
			prefix = "(434)";
			stringarg0
			{
				title = "Power";
				type = 2;
			}
			stringarg1
			{
				title = "Duration/Amount";
				type = 2;
			}
		}

		437
		{
			title = "Disable Player Control";
			prefix = "(437)";
			arg0
			{
				title = "Time";
			}
			arg1
			{
				title = "Allow jumping?";
				type = 11;
				enum = "noyes";
			}
		}

		438
		{
			title = "Change Object Size";
			prefix = "(438)";
			arg0
			{
				title = "Size (%)";
				default = 100;
			}
		}

		442
		{
			title = "Change Object Type State";
			prefix = "(442)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Change to";
				type = 11;
				enum
				{
					0 = "Specified state";
					1 = "Next state";
				}
			}
			stringarg0
			{
				title = "Object type";
				type = 2;
			}
			stringarg1
			{
				title = "State";
				type = 2;
			}
		}

		457
		{
			title = "Track Object's Angle";
			prefix = "(457)";
			arg0
			{
				title = "Anchor tag";
				type = 14;
			}
			arg1
			{
				title = "Angle tolerance";
				type = 8;
			}
			arg2
			{
				title = "Time tolerance";
			}
			arg3
			{
				title = "Trigger linedef tag";
				type = 15;
			}
			arg4
			{
				title = "Track after failure?";
				type = 11;
				enum = "noyes";
			}
		}

		458
		{
			title = "Stop Tracking Object's Angle";
			prefix = "(458)";
		}

		460
		{
			title = "Award Rings";
			prefix = "(460)";
			arg0
			{
				title = "Rings";
			}
			arg1
			{
				title = "Periodicity";
			}
		}

		461
		{
			title = "Spawn Object";
			prefix = "(461)";
			arg0
			{
				title = "X position";
			}
			arg1
			{
				title = "Y position";
			}
			arg2
			{
				title = "Z position";
			}
			arg3
			{
				title = "Angle";
				type = 8;
			}
			arg4
			{
				title = "Randomize position?";
				type = 11;
				enum = "noyes";
			}
			arg5
			{
				title = "Max X position";
			}
			arg6
			{
				title = "Max Y position";
			}
			arg7
			{
				title = "Max Z position";
			}
			stringarg0
			{
				title = "Object type";
				type = 2;
			}
		}

		462
		{
			title = "Stop Timer/Exit Stage in Record Attack";
			prefix = "(462)";
		}

		463
		{
			title = "Dye Object";
			prefix = "(463)";
			stringarg0
			{
				title = "Skin color";
				type = 2;
			}
		}

		464
		{
			title = "Trigger Egg Capsule";
			prefix = "(464)";
			arg0
			{
				title = "Egg Capsule tag";
				type = 14;
			}
			arg1
			{
				title = "End level?";
				type = 11;
				enum = "yesno";
			}
		}

		466
		{
			title = "Set Level Failure State";
			prefix = "(466)";
			arg0
			{
				title = "State";
				type = 11;
				enum
				{
					0 = "Failure";
					1 = "Success";
				}
			}
		}
	}

	linedefexecmisc
	{
		title = "Linedef Executor (misc.)";

		413
		{
			title = "Change Music";
			prefix = "(413)";
			arg0
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "For all players";
					2 = "Seek offset from current position";
					4 = "Fade to custom volume";
					8 = "Don't reload after death";
					16 = "Force music reload";
					32 = "Don't loop";
				}
			}
			arg1
			{
				title = "Position";
			}
			arg2
			{
				title = "Fade out time";
			}
			arg3
			{
				title = "Fade in time";
			}
			arg4
			{
				title = "Fade destination volume";
			}
			arg5
			{
				title = "Fade start volume";
				default = -1;
			}
			arg6
			{
				title = "Track number";
			}
			stringarg0
			{
				title = "Music name";
				type = 2;
			}
		}

		414
		{
			title = "Play Sound Effect";
			prefix = "(414)";
			arg0
			{
				title = "Source";
				type = 11;
				enum
				{
					0 = "Triggering object";
					1 = "Trigger sector";
					2 = "Nowhere";
					3 = "Tagged sectors";
				}
			}
			arg1
			{
				title = "Listener";
				type = 11;
				enum
				{
					0 = "Triggering player";
					1 = "Everyone";
					2 = "Everyone touching tagged sectors";
				}
			}
			arg2
			{
				title = "Target sector tag";
				type = 13;
			}
			stringarg0
			{
				title = "Sound name";
				type = 2;
			}
		}

		415
		{
			title = "Run Script";
			prefix = "(415)";
			stringarg0
			{
				title = "Lump name";
				type = 2;
			}
		}

		422
		{
			title = "Switch to Cut-Away View";
			prefix = "(422)";
			arg0
			{
				title = "Viewpoint tag";
				type = 14;
			}
			arg1
			{
				title = "Time";
			}
		}

		423
		{
			title = "Change Sky";
			prefix = "(423)";
			arg0
			{
				title = "Sky number";
			}
			arg1
			{
				title = "For all players?";
				type = 11;
				enum = "noyes";
			}
		}

		424
		{
			title = "Change Weather";
			prefix = "(424)";
			arg0
			{
				title = "Weather";
				type = 11;
				enum
				{
					0 = "None";
					1 = "Storm (thunder, lightning and rain)";
					2 = "Snow";
					3 = "Rain";
					4 = "Preloaded";
					5 = "Storm (no rain)";
					6 = "Storm (no lightning)";
				}
			}
			arg1
			{
				title = "For all players?";
				type = 11;
				enum = "noyes";
			}
		}

		436
		{
			title = "Shatter FOF";
			prefix = "(436)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Control sector tag";
				type = 13;
			}
		}

		439
		{
			title = "Change Tagged Linedef's Textures";
			prefix = "(439)";
			arg0
			{
				title = "Target linedef tag";
				type = 15;
			}
			arg1
			{
				title = "Affected sides";
				type = 11;
				enum = "frontbackboth";
			}
			arg2
			{
				title = "Change unset textures?";
				type = 11;
				enum = "yesno";
			}
			arg3
			{
				title = "Use backside textures?";
				type = 11;
				enum = "noyes";
			}
		}

		440
		{
			title = "Start Metal Sonic Race";
			prefix = "(440)";
		}

		441
		{
			title = "Condition Set Trigger";
			prefix = "(441)";
			arg0
			{
				title = "Trigger number";
			}
		}

		443
		{
			title = "Call Lua Function";
			prefix = "(443)";
			stringarg0
			{
				title = "Function name";
				type = 2;
			}
		}

		444
		{
			title = "Earthquake";
			prefix = "(444)";
			arg0
			{
				title = "Duration";
			}
			arg1
			{
				title = "Intensity";
			}
		}

		445
		{
			title = "Make FOF Disappear/Reappear";
			prefix = "(445)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Control sector tag";
				type = 13;
			}
			arg2
			{
				title = "Effect";
				type = 11;
				enum
				{
					0 = "Disappear";
					1 = "Reappear";
				}
			}
		}

		446
		{
			title = "Make FOF Crumble";
			prefix = "(446)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Control sector tag";
				type = 13;
			}
			arg2
			{
				title = "Respawn?";
				type = 11;
				enum
				{
					0 = "Yes";
					1 = "No";
					2 = "Unless FF_NORETURN";
					3 = "Only if FF_NORETURN";
				}
			}
		}

		447
		{
			title = "Change Tagged Sector's Colormap";
			prefix = "(447)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Colormap sector tag";
				type = 13;
			}
			arg2
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Add to existing colormap";
					2 = "Subtract light R";
					4 = "Subtract light G";
					8 = "Subtract light B";
					16 = "Subtract light A";
					32 = "Subtract fade R";
					64 = "Subtract fade G";
					128 = "Subtract fade B";
					256 = "Subtract fade A";
					512 = "Subtract fadestart";
					1024 = "Subtract fadeend";
					2048 = "Ignore flags";
				}
			}
		}

		448
		{
			title = "Change Skybox";
			prefix = "(448)";
			arg0
			{
				title = "Viewpoint ID";
			}
			arg1
			{
				title = "Centerpoint ID";
			}
			arg2
			{
				title = "Change?";
				type = 11;
				enum
				{
					0 = "Viewpoint";
					1 = "Centerpoint";
					2 = "Both";
				}
			}
			arg3
			{
				title = "For all players?";
				type = 11;
				enum = "noyes";
			}
		}

		449
		{
			title = "Enable Bosses with Parameter";
			prefix = "(449)";
			arg0
			{
				title = "Boss ID";
			}
			arg1
			{
				title = "Effect";
				type = 11;
				enum
				{
					0 = "Enable";
					1 = "Disable";
				}
			}
		}

		450
		{
			title = "Execute Linedef Executor (specific tag)";
			prefix = "(450)";
			arg0
			{
				title = "Trigger linedef tag";
				type = 15;
			}
		}

		451
		{
			title = "Execute Linedef Executor (random tag in range)";
			prefix = "(451)";
			arg0
			{
				title = "Start of tag range";
				type = 15;
			}
			arg1
			{
				title = "End of tag range";
				type = 15;
			}
		}

		452
		{
			title = "Set FOF Translucency";
			prefix = "(452)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Control sector tag";
				type = 13;
			}
			arg2
			{
				title = "Alpha";
			}
			arg3
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Add to current translucency";
					2 = "Don't handle FF_TRANSLUCENT";
				}
			}
		}

		453
		{
			title = "Fade FOF";
			prefix = "(453)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Control sector tag";
				type = 13;
			}
			arg2
			{
				title = "Alpha";
			}
			arg3
			{
				title = "Fading speed";
			}
			arg4
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Add to current translucency";
					2 = "Interrupt ongoing fades";
					4 = "Speed is duration";
					8 = "Don't change collision";
					16 = "No collision during fade";
					32 = "Don't handle FF_TRANSLUCENT";
					64 = "Don't handle FF_EXISTS";
					128 = "Don't fade lighting";
					256 = "Don't fade colormap";
					512 = "Use exact alpha in OpenGL";
				}
			}
		}

		454
		{
			title = "Stop Fading FOF";
			prefix = "(454)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Control sector tag";
				type = 13;
			}
			arg2
			{
				title = "Finalize collision?";
				type = 11;
				enum = "yesno";
			}
		}

		455
		{
			title = "Fade Tagged Sector's Colormap";
			prefix = "(455)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Colormap sector tag";
				type = 13;
			}
			arg2
			{
				title = "Fade duration";
			}
			arg3
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Add to existing colormap";
					2 = "Subtract light R";
					4 = "Subtract light G";
					8 = "Subtract light B";
					16 = "Subtract light A";
					32 = "Subtract fade R";
					64 = "Subtract fade G";
					128 = "Subtract fade B";
					256 = "Subtract fade A";
					512 = "Subtract fadestart";
					1024 = "Subtract fadeend";
					2048 = "Ignore flags";
					4096 = "Fade from invisible black";
					8192 = "Interrupt ongoing fades";
				}
			}
		}

		456
		{
			title = "Stop Fading Tagged Sector's Colormap";
			prefix = "(456)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
		}

		459
		{
			title = "Control Text Prompt";
			prefix = "(459)";
			arg0
			{
				title = "Prompt number";
			}
			arg1
			{
				title = "Page number";
			}
			arg2
			{
				title = "Flags";
				type = 11;
				enum
				{
					1 = "Close current text prompt";
					2 = "Trigger linedef executor on close";
					4 = "Find prompt by name";
					8 = "Don't disable controls";
				}
			}
			arg3
			{
				title = "Trigger linedef tag";
				type = 15;
			}
			stringarg0
			{
				title = "Prompt name";
				type = 2;
			}
		}

		465
		{
			title = "Set Linedef Executor Delay";
			prefix = "(465)";
			arg0
			{
				title = "Linedef tag";
				type = 15;
			}
			arg1
			{
				title = "Value";
			}
			arg2
			{
				title = "Set/Add?";
				type = 11;
				enum = "setadd";
			}
		}

		468
		{
			title = "Change Linedef Argument";
			prefix = "(468)";
			arg0
			{
				title = "Linedef tag";
				type = 15;
			}
			arg1
			{
				title = "Argument";
			}
			arg2
			{
				title = "Value";
			}
			arg3
			{
				title = "Set/Add?";
				type = 11;
				enum = "setadd";
			}
		}

		499
		{
			title = "Enable/Disable Waypoints";
			prefix = "(499)";
			arg0
			{
				title = "Enable?";
				type = 3;
			}
		}
	}

	linedefexecpoly
	{
		title = "Linedef Executor (polyobject)";

		480
		{
			title = "Door Slide";
			prefix = "(480)";
			arg0
			{
				title = "PolyObject ID";
				type = 14;
			}
			arg1
			{
				title = "Speed";
			}
			arg2
			{
				title = "Distance";
			}
			arg3
			{
				title = "Return delay";
			}
		}

		481
		{
			title = "Door Swing";
			prefix = "(481)";
			arg0
			{
				title = "PolyObject ID";
				type = 14;
			}
			arg1
			{
				title = "Speed";
			}
			arg2
			{
				title = "Rotation";
				type = 8;
			}
			arg3
			{
				title = "Return delay";
			}
		}

		482
		{
			title = "Move";
			prefix = "(482)";
			arg0
			{
				title = "PolyObject ID";
				type = 14;
			}
			arg1
			{
				title = "Speed";
			}
			arg2
			{
				title = "Distance";
			}
			arg3
			{
				title = "Override?";
				type = 11;
				enum = "noyes";
			}
		}

		484
		{
			title = "Rotate";
			prefix = "(484)";
			arg0
			{
				title = "PolyObject ID";
				type = 14;
			}
			arg1
			{
				title = "Speed";
			}
			arg2
			{
				title = "Rotation";
				type = 8;
			}
			arg3
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Don't turn others";
					2 = "Turn players";
					4 = "Continuous rotation";
					8 = "Override";
				}
			}
		}

		488
		{
			title = "Move by Waypoints";
			prefix = "(488)";
			arg0
			{
				title = "PolyObject ID";
				type = 14;
			}
			arg1
			{
				title = "Speed";
			}
			arg2
			{
				title = "Waypoint sequence";
			}
			arg3
			{
				title = "Return behavior";
				type = 11;
				enum
				{
					0 = "Don't return";
					1 = "Return to first waypoint";
					2 = "Repeat sequence in reverse";
				}
			}
			arg4
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Move in reverse";
					2 = "Loop movement";
				}
			}
		}

		489
		{
			title = "Set Visibility, Tangibility";
			prefix = "(489)";
			arg0
			{
				title = "PolyObject ID";
				type = 14;
			}
			arg1
			{
				title = "Visibility";
				type = 11;
				enum
				{
					0 = "No change";
					1 = "Visible";
					2 = "Invisible";
				}
			}
			arg2
			{
				title = "Tangibility";
				type = 11;
				enum
				{
					0 = "No change";
					1 = "Tangible";
					2 = "Intangible";
				}
			}
		}

		491
		{
			title = "Set Translucency";
			prefix = "(491)";
			arg0
			{
				title = "PolyObject ID";
				type = 14;
			}
			arg1
			{
				title = "Translucency level";
			}
			arg2
			{
				title = "Set/Add?";
				type = 11;
				enum = "setadd";
			}
		}

		492
		{
			title = "Fade Translucency";
			prefix = "(492)";
			arg0
			{
				title = "PolyObject ID";
				type = 14;
			}
			arg1
			{
				title = "Translucency level";
			}
			arg2
			{
				title = "Fading speed";
			}
			arg3
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Add to current translucency";
					2 = "Interrupt ongoing fades";
					4 = "Speed is duration";
					8 = "Don't change collision";
					16 = "No collision during fade";
				}
			}
		}
	}

	scrollpush
	{
		title = "Scrollers and Pushers";

		500
		{
			title = "Scroll Walls";
			prefix = "(500)";
			arg0
			{
				title = "Side";
				type = 11;
				enum = "frontbackboth";
			}
			arg1
			{
				title = "Horizontal speed";
			}
			arg2
			{
				title = "Vertical speed";
			}
		}

		502
		{
			title = "Scroll Walls Remotely";
			prefix = "(502)";
			arg0
			{
				title = "Linedef tag";
				type = 15;
			}
			arg1
			{
				title = "Side";
				type = 11;
				enum = "frontbackboth";
			}
			arg2
			{
				title = "Horizontal speed";
			}
			arg3
			{
				title = "Vertical speed";
			}
			arg4
			{
				title = "Type";
				type = 11;
				enum = "scrolltype";
			}
		}

		510
		{
			title = "Scroll Planes";
			prefix = "(510)";
			arg0
			{
				title = "Sector tag";
				type = 13;
			}
			arg1
			{
				title = "Affected planes";
				type = 11;
				enum = "floorceiling";
			}
			arg2
			{
				title = "Scroll/Carry?";
				type = 11;
				enum = "scrollcarry";
			}
			arg3
			{
				title = "Base speed";
			}
			arg4
			{
				title = "Type";
				type = 26;
				enum = "scrolltype";
				flags
				{
					4 = "Non-exclusive";
				}
			}
		}

		541
		{
			title = "Wind/Current";
			prefix = "(541)";
			arg0
			{
				title = "Sector tag";
				type = 13;
			}
			arg1
			{
				title = "Horizontal speed";
			}
			arg2
			{
				title = "Vertical speed";
			}
			arg3
			{
				title = "Type";
				type = 11;
				enum
				{
					0 = "Wind";
					1 = "Current";
				}
			}
			arg4
			{
				title = "Flags";
				type = 12;
				flags
				{
					1 = "Slide";
					2 = "Non-exclusive";
				}
			}
		}
	}

	light
	{
		title = "Lighting";

		600
		{
			title = "Copy Light Level to Tagged Sector's Planes";
			prefix = "(600)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Affected planes";
				type = 11;
				enum = "floorceiling";
			}
		}

		602
		{
			title = "Adjustable Pulsating Light";
			prefix = "(602)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Speed";
			}
			arg2
			{
				title = "Brightness 1";
			}
			arg3
			{
				title = "Use target brightness?";
				type = 11;
				enum = "noyes";
			}
			arg4
			{
				title = "Brightness 2";
			}
		}

		603
		{
			title = "Adjustable Flickering Light";
			prefix = "(603)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Speed";
			}
			arg2
			{
				title = "Brightness 1";
			}
			arg3
			{
				title = "Use target brightness?";
				type = 11;
				enum = "noyes";
			}
			arg4
			{
				title = "Brightness 2";
			}
		}

		604
		{
			title = "Adjustable Blinking Light";
			prefix = "(604)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Brightness 1 tics";
			}
			arg2
			{
				title = "Brightness 2 tics";
			}
			arg3
			{
				title = "Brightness 1";
			}
			arg4
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Use target brightness";
					2 = "Synchronized";
				}
			}
			arg5
			{
				title = "Brightness 2";
			}
		}

		606
		{
			title = "Copy Colormap";
			prefix = "(606)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Colormap sector tag";
				type = 13;
			}
		}
	}

	slope
	{
		title = "Slope";

		700
		{
			title = "Create Sector-Based Slope";
			prefix = "(700)";
			id = "plane_align";
			arg0
			{
				title = "Floor";
				type = 11;
				enum = "frontback";
			}
			arg1
			{
				title = "Ceiling";
				type = 11;
				enum = "frontback";
			}
			arg2
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "No physics";
					2 = "Dynamic";
					4 = "Copy to other side";
				}
			}
		}

		704
		{
			title = "Create Vertex-Based Slope";
			prefix = "(704)";
			arg0
			{
				title = "Plane";
				type = 11;
				enum
				{
					0 = "Front floor";
					1 = "Front ceiling";
					2 = "Back floor";
					3 = "Back ceiling";
				}
			}
			arg1
			{
				title = "Vertex 1 tag";
				type = 14;
			}
			arg2
			{
				title = "Vertex 2 tag";
				type = 14;
			}
			arg3
			{
				title = "Vertex 3 tag";
				type = 14;
			}
			arg4
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "No physics";
					2 = "Dynamic";
				}
			}
		}

		720
		{
			title = "Copy Slope";
			prefix = "(720)";
			arg0
			{
				title = "Front floor tag";
				type = 13;
			}
			arg1
			{
				title = "Front ceiling tag";
				type = 13;
			}
			arg2
			{
				title = "Back floor tag";
				type = 13;
			}
			arg3
			{
				title = "Back ceiling tag";
				type = 13;
			}
			arg4
			{
				title = "Share slope";
				type = 12;
				enum
				{
					1 = "Front floor to back sector";
					2 = "Back floor to front sector";
					4 = "Front ceiling to back sector";
					8 = "Back ceiling to front sector";
				}
			}
		}

		777
		{
			title = "Create Anchor-Based Slope";
			prefix = "(777)";
			arg0
			{
				title = "Planes";
				type = 12;
				enum
				{
					1 = "Floor";
					2 = "Ceiling";
				}
			}
			arg1
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "No physics";
					2 = "Dynamic";
					4 = "Slope backside";
					8 = "Mirror plane";
				}
			}
		}

		799
		{
			title = "Set Tagged Dynamic Slope Vertex to Front Sector Height";
			prefix = "(799)";
			arg0
			{
				title = "Apply height";
				type = 11;
				enum
				{
					0 = "Absolute";
					1 = "Relative";
				}
			}
		}
	}
}
